{"ast":null,"code":"var _jsxFileName = \"D:\\\\Utilisateur\\\\Documents\\\\GitHub\\\\TENET\\\\tenet-front\\\\src\\\\socketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http//localhost:3000');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = userRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivedCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"4yUhTLrGeLx59pjHF1LsuKpiyTs=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["D:/Utilisateur/Documents/GitHub/TENET/tenet-front/src/socketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","socket","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","userRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivedCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect} from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io('http//localhost:3000');\r\n\r\nconst ContextProvider = ({children}) => {\r\n    const [stream, setStream] = useState(null);\r\n    const [me, setMe] = useState('');\r\n    const [call, setCall] = useState({});\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [name, setName] = useState('');\r\n\r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n    const connectionRef = userRef();\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video:true, audio:true})\r\n            .then((currentStream) =>{\r\n                setStream(currentStream);\r\n\r\n                myVideo.current.srcObject = currentStream;\r\n            });\r\n        \r\n        socket.on('me', (id) => setMe(id));\r\n\r\n        socket.on('calluser', ({ from, name: callerName, signal}) =>{\r\n            setCall({ isReceivedCall: true, from, name: callerName, signal})\r\n        });\r\n    }, []);\r\n\r\n    const answerCall = () =>{\r\n        setCallAccepted(true)\r\n\r\n        const peer = new Peer({ initiator: false, trickle:false, stream});\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answercall', { signal: data, to: call.from});\r\n        });\r\n\r\n        peer.on('stream', (currentStream) =>{\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        peer.signal(call.signal);\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const callUser = (id) => {\r\n        const peer = new Peer({ initiator: true, trickle:false, stream});\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('calluser', { userToCall: id, signalData: data, from: me, name});\r\n        });\r\n\r\n        peer.on('stream', (currentStream) =>{\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('callaccepted', (signal) => {\r\n            setCallAccepted(true);\r\n\r\n            peer.signal(signal);\r\n        });\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const leaveCall = () => {\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return(\r\n        <SocketContext.Provider value ={{\r\n            call,\r\n            callAccepted,\r\n            myVideo,\r\n            userVideo,\r\n            stream,\r\n            name,\r\n            setName,\r\n            callEnded,\r\n            me,\r\n            callUser,\r\n            leaveCall,\r\n            answerCall,\r\n        }}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\n\r\nexport { ContextProvider, SocketContext};"]},"metadata":{},"sourceType":"module"}