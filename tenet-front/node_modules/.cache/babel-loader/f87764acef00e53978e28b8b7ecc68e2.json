{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http//localhost:3000');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = userState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = userState({});\n  const [callAccepted, setCallAccepted] = userState(false);\n  const [callEnded, setCallEnded] = userState(false);\n  const myVideo = useRef();\n  const userVideo = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivedCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', () => {\n      socket.emit('answercall', {\n        signal: DataCue,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n  };\n\n  const callUser = () => {};\n\n  const leaveCall = () => {};\n};\n\n_s(ContextProvider, \"dRmj1IEaSpatL6yfz/TKiGH90eI=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["D:/Utilisateur/Documents/GitHub/TENET/tenet-front/src/socketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","socket","ContextProvider","children","stream","setStream","userState","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","myVideo","userVideo","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","name","callerName","signal","isReceivedCall","answerCall","peer","initiator","trickle","emit","DataCue","to","callUser","leaveCall"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,SAAjD,QAAiE,OAAjE;AACA,SAAQC,EAAR,QAAiB,kBAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,aAAa,gBAAGN,aAAa,EAAnC;AAEA,MAAMO,MAAM,GAAGH,EAAE,CAAC,sBAAD,CAAjB;;AAEA,MAAMI,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AACpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,SAAS,CAAC,IAAD,CAArC;AACA,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcb,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBJ,SAAS,CAAC,EAAD,CAAjC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,SAAS,CAAC,KAAD,CAAjD;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,SAAS,CAAC,KAAD,CAA3C;AAEA,QAAMS,OAAO,GAAGnB,MAAM,EAAtB;AACA,QAAMoB,SAAS,GAAGpB,MAAM,EAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZoB,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAC,IAAR;AAAcC,MAAAA,KAAK,EAAC;AAApB,KAApC,EACKC,IADL,CACWC,aAAD,IAAkB;AACpBlB,MAAAA,SAAS,CAACkB,aAAD,CAAT;AAEAR,MAAAA,OAAO,CAACS,OAAR,CAAgBC,SAAhB,GAA4BF,aAA5B;AACH,KALL;AAOAtB,IAAAA,MAAM,CAACyB,EAAP,CAAU,IAAV,EAAiBC,EAAD,IAAQnB,KAAK,CAACmB,EAAD,CAA7B;AAEA1B,IAAAA,MAAM,CAACyB,EAAP,CAAU,UAAV,EAAsB,CAAC;AAAEE,MAAAA,IAAF;AAAQC,MAAAA,IAAI,EAAEC,UAAd;AAA0BC,MAAAA;AAA1B,KAAD,KAAsC;AACxDrB,MAAAA,OAAO,CAAC;AAAEsB,QAAAA,cAAc,EAAE,IAAlB;AAAwBJ,QAAAA,IAAxB;AAA8BC,QAAAA,IAAI,EAAEC,UAApC;AAAgDC,QAAAA;AAAhD,OAAD,CAAP;AACH,KAFD;AAGH,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAME,UAAU,GAAG,MAAK;AACpBrB,IAAAA,eAAe,CAAC,IAAD,CAAf;AAEA,UAAMsB,IAAI,GAAG,IAAInC,IAAJ,CAAS;AAAEoC,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,OAAO,EAAC,KAA5B;AAAmChC,MAAAA;AAAnC,KAAT,CAAb;AAEA8B,IAAAA,IAAI,CAACR,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACpBzB,MAAAA,MAAM,CAACoC,IAAP,CAAY,YAAZ,EAA0B;AAAEN,QAAAA,MAAM,EAAEO,OAAV;AAAmBC,QAAAA,EAAE,EAAE9B,IAAI,CAACmB;AAA5B,OAA1B;AACH,KAFD;AAIAM,IAAAA,IAAI,CAACR,EAAL,CAAQ,QAAR,EAAmBH,aAAD,IAAkB;AAChCP,MAAAA,SAAS,CAACQ,OAAV,CAAkBC,SAAlB,GAA8BF,aAA9B;AACH,KAFD;AAGH,GAZD;;AAcA,QAAMiB,QAAQ,GAAG,MAAM,CAEtB,CAFD;;AAIA,QAAMC,SAAS,GAAG,MAAM,CAEvB,CAFD;AAGH,CA9CD;;GAAMvC,e;;KAAAA,e","sourcesContent":["import React, { createContext, useState, useRef, useEffect} from 'react';\r\nimport {io} from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io('http//localhost:3000');\r\n\r\nconst ContextProvider = ({children}) => {\r\n    const [stream, setStream] = userState(null);\r\n    const [me, setMe] = useState('');\r\n    const [call, setCall] = userState({});\r\n    const [callAccepted, setCallAccepted] = userState(false);\r\n    const [callEnded, setCallEnded] = userState(false);\r\n\r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video:true, audio:true})\r\n            .then((currentStream) =>{\r\n                setStream(currentStream);\r\n\r\n                myVideo.current.srcObject = currentStream;\r\n            });\r\n        \r\n        socket.on('me', (id) => setMe(id));\r\n\r\n        socket.on('calluser', ({ from, name: callerName, signal}) =>{\r\n            setCall({ isReceivedCall: true, from, name: callerName, signal})\r\n        });\r\n    }, []);\r\n\r\n    const answerCall = () =>{\r\n        setCallAccepted(true)\r\n\r\n        const peer = new Peer({ initiator: false, trickle:false, stream});\r\n\r\n        peer.on('signal', () => {\r\n            socket.emit('answercall', { signal: DataCue, to: call.from});\r\n        });\r\n\r\n        peer.on('stream', (currentStream) =>{\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n    }\r\n\r\n    const callUser = () => {\r\n\r\n    }\r\n\r\n    const leaveCall = () => {\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}